#!/usr/bin/env python3.4
#
# This file is part of dashboard.
#
# dashboard is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# dashboard is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with environmentd.  If not, see <http://www.gnu.org/licenses/>.

# pylint: disable=broad-except
# pylint: disable=invalid-name

"""Run from a systemd timer to generate status json that is served by the web dashboard"""

import datetime
import json
import os
from warwick.observatory.common import daemons, log

# This directory must be shared with the TCS via NFS
BASE_OUTPUT_DIR = '/srv/dashboard/generated'

def generate_json(output_path, data):
    """Queries a set of daemons and stores the save a json file to the specified path"""
    output = {'date': datetime.datetime.utcnow().strftime('%Y-%m-%dT%H:%M:%S.%f')}
    for daemon, key, query in data:
        try:
            with daemon.connect() as d:
                if len(data) == 1:
                    output = query(d)
                else:
                    output[key] = query(d)
        except Exception as e:
            print('failed to query ' + key + ' with error: ' + str(e))
            log.error('dashboardd', 'Failed to query ' + key + ' (' + str(e) + ')')

    try:
        with open(output_path, 'w') as output_file:
            json.dump(output, output_file, sort_keys=True)
    except Exception as e:
        print('failed to write json with error: ' + str(e))
        log.error('dashboardd', 'Failed to write json (' + str(e) + ')')

# One metre dashboard pages
generate_json(BASE_OUTPUT_DIR + '/onemetre-public.json', [
    (daemons.onemetre_environment, 'environment', lambda d: d.status()),
    (daemons.onemetre_operations, 'ops', lambda d: d.status()),
    (daemons.onemetre_power, 'power', lambda d: d.last_measurement()),
])

generate_json(BASE_OUTPUT_DIR + '/onemetre-private.json', [
    (daemons.onemetre_pipeline, 'pipeline', lambda d: d.report_status()),
    (daemons.onemetre_telescope, 'telescope', lambda d: d.report_status()),
    (daemons.onemetre_blue_camera, 'blue', lambda d: d.report_status()),
    (daemons.onemetre_red_camera, 'red', lambda d: d.report_status())
])

# Raw data for GOTO operations
generate_json(BASE_OUTPUT_DIR + '/onemetre-vaisala.json', [
    (daemons.onemetre_vaisala, 'vaisala', lambda d: d.last_measurement())
])

generate_json(BASE_OUTPUT_DIR + '/superwasp-log.json', [
    (daemons.superwasp_log, 'superwasp', lambda d: d.last_measurement())
])
