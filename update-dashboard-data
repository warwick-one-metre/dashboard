#!/usr/bin/env python3.6
#
# This file is part of dashboard.
#
# dashboard is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# dashboard is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with environmentd.  If not, see <http://www.gnu.org/licenses/>.

# pylint: disable=broad-except
# pylint: disable=invalid-name

"""Run from a systemd timer to generate status json that is served by the web dashboard"""

import datetime
import json
from warwick.observatory.common import daemons, log

# This directory must be shared with the TCS via NFS
BASE_OUTPUT_DIR = '/srv/dashboard/generated'
STATUS_FILE = BASE_OUTPUT_DIR + '/update-dashboard-data.json'

try:
    with open(STATUS_FILE, 'r') as infile:
        status = json.load(infile)
except Exception:
    status = {}


def query_daemon(daemon, key, query):
    """Query status data from a daemon setting / clearing error flags on failure"""
    try:
        with daemon.connect() as d:
            response = query(d)

        # Some daemons will return None on error
        if response is None:
            if not key in status or status[key]:
                print('received empty response from ' + key + '')
                log.error('dashboardd', 'Lost contact with ' + key + ' (empty response)')
            status[key] = False
        else:
            if key in status and not status[key]:
                log.info('dashboardd', 'Restored contact with ' + key)
            status[key] = True
            return response
    except Exception as e:
        print('failed to query ' + key + ' with error: ' + str(e))
        if not key in status or status[key]:
            log.error('dashboardd', 'Lost contact with ' + key + ' (' + str(e) + ')')
        status[key] = False

    return None


def generate_json(output_path, data, force_key=False):
    """Queries a set of daemons and stores the save a json file to the specified path"""
    output = {'date': datetime.datetime.utcnow().strftime('%Y-%m-%dT%H:%M:%S.%f')}
    for daemon, key, query in data:
        response = query_daemon(daemon, key, query)
        if response:
            if len(data) == 1 and not force_key:
                output = response
            else:
                output[key] = response
    try:
        with open(output_path, 'w') as output_file:
            json.dump(output or {}, output_file)

        with open(STATUS_FILE, 'w') as output_file:
            json.dump(status, output_file)
    except Exception as e:
        print('failed to write json with error: ' + str(e))
        log.error('dashboardd', 'Failed to write json (' + str(e) + ')')


def extract_environment_data(data, data_map):
    """Extract weather data from the observatory_environment response
       data_map defines a dictionary of daemons and sensors that are requested
    """
    try:
        ret = {}
        for daemon, sensors in data_map.items():
            ret[daemon] = {}
            if daemon not in data or 'parameters' not in data[daemon]:
                continue

            daemon_data = data[daemon]['parameters']
            for sensor in sensors:
                ret[daemon][sensor] = {}
                if daemon_data[sensor]['current']:
                    for s in ['latest', 'min', 'max', 'limits', 'warn_limits']:
                        if s in daemon_data[sensor]:
                            ret[daemon][sensor][s] = daemon_data[sensor][s]
        return ret
    except:
        return {}


def generate_goto_json(output_path, date, environment):
    """Queries the observatory environment daemon and saves as json
       the data useful for the GOTO dashboard page
    """
    output = {'date': date}
    if environment:
        output.update(extract_environment_data(environment, {
            'goto_vaisala': [
                'wind_speed', 'temperature', 'relative_humidity', 'dew_point_delta',
                'pressure'
            ],
            'rain': ['unsafe_boards'],
            'goto_dome1_roomalert': ['internal_temp', 'internal_humidity'],
            'goto_dome2_roomalert': ['internal_temp', 'internal_humidity', 'hatch_closed'],
            'goto_ups': [
                'dome1_upper_ups_status', 'dome1_upper_ups_battery_remaining', 'dome1_upper_ups_battery_healthy',
                'dome1_lower_ups_status', 'dome1_lower_ups_battery_remaining', 'dome1_lower_ups_battery_healthy',
                'dome2_upper_ups_status', 'dome2_upper_ups_battery_remaining', 'dome2_upper_ups_battery_healthy',
                'dome2_lower_ups_status', 'dome2_lower_ups_battery_remaining', 'dome2_lower_ups_battery_healthy',
            ],
            'tng': ['dust', 'seeing', 'solarimeter'],
            'superwasp_aurora': ['clarity'],
            'ephem': ['sun_alt', 'moon_alt', 'moon_percent_illumination']
        }))

    try:
        with open(output_path, 'w') as output_file:
            json.dump(output or {}, output_file)

        with open(STATUS_FILE, 'w') as output_file:
            json.dump(status, output_file)
    except Exception as e:
        print('failed to write json with error: ' + str(e))
        log.error('dashboardd', 'Failed to write json (' + str(e) + ')')


def generate_onemetre_json(output_path, date, environment):
    """Queries daemons to generate the public data for the W1m dashboard page"""
    output = {'date': date}
    if environment:
        output.update(extract_environment_data(environment, {
            'w1m_vaisala': [
                'wind_speed', 'temperature', 'relative_humidity', 'dew_point_delta',
                'pressure', 'median_wind_speed'
            ],
            'rain': ['unsafe_boards'],
            'w1m_roomalert': [
                'internal_humidity', 'internal_temp', 'truss_temp',
                'security_system_safe', 'trap_closed', 'hatch_closed'
            ],
            'w1m_diskspace': ['data_fs_available_bytes'],
            'tng': ['dust', 'seeing', 'solarimeter'],
            'superwasp_aurora': ['clarity'],
            'ephem': ['sun_alt', 'moon_alt', 'moon_percent_illumination']
        }))

    output['w1m_power'] = query_daemon(daemons.onemetre_power, 'w1m_power',
                                       lambda d: d.last_measurement())

    try:
        with open(output_path, 'w') as output_file:
            json.dump(output or {}, output_file)

        with open(STATUS_FILE, 'w') as output_file:
            json.dump(status, output_file)
    except Exception as e:
        print('failed to write json with error: ' + str(e))
        log.error('dashboardd', 'Failed to write json (' + str(e) + ')')


def generate_superwasp_json(output_path, date, environment):
    """Queries daemons to generate the public data for the SuperWASP dashboard page"""
    output = {'date': date}
    if environment:
        output.update(extract_environment_data(environment, {
            'goto_vaisala': [
                'wind_speed', 'temperature', 'relative_humidity', 'dew_point_delta',
                'pressure', 'median_wind_speed'
            ],
            'rain': ['unsafe_boards'],
            'superwasp_roomalert': [
                'comp_room_temp', 'comp_room_humidity',
                'cam_room_temp', 'cam_room_humidity',
                'cam_rack_temp'],
            'superwasp_diskspace': ['data_fs_available_bytes'],
            'tng': ['dust', 'seeing', 'solarimeter'],
            'superwasp_aurora': ['clarity'],
            'ephem': ['sun_alt', 'moon_alt', 'moon_percent_illumination']
        }))

    output['superwasp_power'] = query_daemon(daemons.superwasp_power, 'superwasp_power',
                                        lambda d: d.last_measurement())
    output['superwasp_aircon'] = query_daemon(daemons.superwasp_aircon, 'superwasp_aircon',
                                        lambda d: d.last_measurement())

    try:
        with open(output_path, 'w') as output_file:
            json.dump(output or {}, output_file)

        with open(STATUS_FILE, 'w') as output_file:
            json.dump(status, output_file)
    except Exception as e:
        print('failed to write json with error: ' + str(e))
        log.error('dashboardd', 'Failed to write json (' + str(e) + ')')


def generate_clasp_json(output_path, date, environment):
    """Queries daemons to generate the public data for the CLASP dashboard page"""
    output = {'date': date}
    if environment:
        output.update(extract_environment_data(environment, {
            'w1m_vaisala': [
                'wind_speed', 'temperature', 'relative_humidity', 'dew_point_delta',
                'pressure', 'median_wind_speed'
            ],
            'rain': ['unsafe_boards'],
            'clasp_roomalert': [
                'internal_humidity', 'internal_temperature'
            ],
            'clasp_diskspace': ['data_fs_available_bytes'],
            'tng': ['dust', 'seeing', 'solarimeter'],
            'superwasp_aurora': ['clarity'],
            'ephem': ['sun_alt', 'moon_alt', 'moon_percent_illumination']
        }))

    output['clasp_power'] = query_daemon(daemons.clasp_power, 'clasp_power',
                                       lambda d: d.last_measurement())
    output['clasp_dehumidifier'] = query_daemon(daemons.clasp_dehumidifier, 'clasp_dehumidifier',
                                                lambda d: d.status())

    try:
        with open(output_path, 'w') as output_file:
            json.dump(output or {}, output_file)

        with open(STATUS_FILE, 'w') as output_file:
            json.dump(status, output_file)
    except Exception as e:
        print('failed to write json with error: ' + str(e))
        log.error('dashboardd', 'Failed to write json (' + str(e) + ')')


date = datetime.datetime.utcnow().strftime('%Y-%m-%dT%H:%M:%S.%f')
environment = query_daemon(daemons.observatory_environment, 'observatory_environment',
                           lambda d: d.status())

# One metre dashboard pages
generate_onemetre_json(BASE_OUTPUT_DIR + '/onemetre-public.json', date, environment)

generate_json(BASE_OUTPUT_DIR + '/onemetre-private.json', [
    (daemons.onemetre_operations, 'w1m_ops', lambda d: d.status()),
    (daemons.onemetre_telescope, 'w1m_telescope', lambda d: d.report_status()),
    (daemons.onemetre_dome, 'w1m_dome', lambda d: d.status()),
    (daemons.onemetre_pipeline, 'w1m_pipeline', lambda d: d.report_status()),
    (daemons.onemetre_blue_camera, 'w1m_blue', lambda d: d.report_status()),
    (daemons.onemetre_red_camera, 'w1m_red', lambda d: d.report_status())
])

# GOTO dashboard pages
generate_goto_json(BASE_OUTPUT_DIR + '/goto-public.json', date, environment)

generate_json(BASE_OUTPUT_DIR + '/goto-dome1-private.json', [
    (daemons.goto_dome1_gtecs_power, 'goto_dome1_power', lambda d: d.get_info(force_update=False)),
    (daemons.goto_dome1_gtecs_mnt, 'goto_dome1_mnt', lambda d: d.get_info(force_update=False)),
    (daemons.goto_dome1_gtecs_dome, 'goto_dome1_dome', lambda d: d.get_info(force_update=False)),
    (daemons.goto_dome1_gtecs_filt, 'goto_dome1_filt', lambda d: d.get_info(force_update=False)),
    (daemons.goto_dome1_gtecs_foc, 'goto_dome1_foc', lambda d: d.get_info(force_update=False)),
    (daemons.goto_dome1_gtecs_cam, 'goto_dome1_cam', lambda d: d.get_info(force_update=False)),
    (daemons.goto_dome1_gtecs_exq, 'goto_dome1_exq', lambda d: d.get_info(force_update=False)),
    (daemons.goto_dome1_gtecs_ota, 'goto_dome1_ota', lambda d: d.get_info(force_update=False)),
    (daemons.goto_dome1_gtecs_conditions, 'goto_dome1_conditions', lambda d: d.get_info(force_update=False))
])

generate_json(BASE_OUTPUT_DIR + '/goto-dome2-private.json', [
    (daemons.goto_dome2_gtecs_power, 'goto_dome2_power', lambda d: d.get_info(force_update=False)),
    (daemons.goto_dome2_gtecs_mnt, 'goto_dome2_mnt', lambda d: d.get_info(force_update=False)),
    (daemons.goto_dome2_gtecs_dome, 'goto_dome2_dome', lambda d: d.get_info(force_update=False)),
    (daemons.goto_dome2_gtecs_filt, 'goto_dome2_filt', lambda d: d.get_info(force_update=False)),
    (daemons.goto_dome2_gtecs_foc, 'goto_dome2_foc', lambda d: d.get_info(force_update=False)),
    (daemons.goto_dome2_gtecs_cam, 'goto_dome2_cam', lambda d: d.get_info(force_update=False)),
    (daemons.goto_dome2_gtecs_exq, 'goto_dome2_exq', lambda d: d.get_info(force_update=False)),
    (daemons.goto_dome2_gtecs_ota, 'goto_dome2_ota', lambda d: d.get_info(force_update=False)),
    (daemons.goto_dome2_gtecs_conditions, 'goto_dome2_conditions', lambda d: d.get_info(force_update=False))
])

# SuperWASP dashboard pages
generate_superwasp_json(BASE_OUTPUT_DIR + '/wasp-public.json', date, environment)

generate_json(BASE_OUTPUT_DIR + '/wasp-private.json', [
    (daemons.superwasp_operations, 'superwasp_ops', lambda d: d.status()),
    (daemons.superwasp_telescope, 'superwasp_telescope', lambda d: d.report_status()),
    (daemons.superwasp_pipeline, 'superwasp_pipeline', lambda d: d.report_status()),
    #(daemons.superwasp_cam1, 'superwasp_cam_1', lambda d: d.report_status()),
    (daemons.superwasp_cam2, 'superwasp_cam_2', lambda d: d.report_status()),
    (daemons.superwasp_cam3, 'superwasp_cam_3', lambda d: d.report_status()),
    #(daemons.superwasp_cam4, 'superwasp_cam_4', lambda d: d.report_status())
])

# CLASP dashboard pages
generate_clasp_json(BASE_OUTPUT_DIR + '/clasp-public.json', date, environment)

generate_json(BASE_OUTPUT_DIR + '/clasp-private.json', [
    (daemons.clasp_operations, 'clasp_ops', lambda d: d.status()),
    (daemons.clasp_telescope, 'clasp_mount', lambda d: d.report_status()),
    (daemons.clasp_focus, 'clasp_focus', lambda d: d.report_status()),
    (daemons.clasp_dome, 'clasp_dome', lambda d: d.status()),
    (daemons.clasp_pipeline, 'clasp_pipeline', lambda d: d.report_status()),
    (daemons.clasp_camera_1, 'clasp_cam1', lambda d: d.report_status()),
    #(daemons.clasp_camera_2, 'clasp_cam2', lambda d: d.report_status()),
])

# Raw data for GOTO operations
generate_json(BASE_OUTPUT_DIR + '/onemetre-vaisala.json', [
    (daemons.onemetre_vaisala, 'vaisala', lambda d: d.last_measurement())
])

generate_json(BASE_OUTPUT_DIR + '/goto-vaisala.json', [
    (daemons.goto_vaisala, 'goto-vaisala', lambda d: d.last_measurement())
])

generate_json(BASE_OUTPUT_DIR + '/netping.json', [
    (daemons.observatory_network_ping, 'netping', lambda d: d.last_measurement())
])

generate_json(BASE_OUTPUT_DIR + '/goto-dome1-roomalert.json', [
    (daemons.goto_dome1_roomalert, 'goto-dome1-roomalert', lambda d: d.last_measurement())
])

generate_json(BASE_OUTPUT_DIR + '/goto-dome2-roomalert.json', [
    (daemons.goto_dome2_roomalert, 'goto-dome2-roomalert', lambda d: d.last_measurement())
])
