#!/usr/bin/env python3
#
# This file is part of dashboard.
#
# dashboard is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# dashboard is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with environmentd.  If not, see <http://www.gnu.org/licenses/>.

# pylint: disable=broad-except
# pylint: disable=invalid-name

"""Run from a systemd timer to generate status json that is served by the web dashboard"""

import datetime
import gzip
import json
import os.path
import shutil
from rockit.common import daemons, log

# This directory must be shared with the TCS via NFS
GENERATED_DATA_DIR = '/srv/dashboard/generated'


def query_daemon(daemon, key, query, status):
    """Query status data from a daemon setting / clearing error flags on failure"""
    try:
        with daemon.connect() as d:
            response = query(d)

        # Some daemons will return None on error
        if response is None:
            if not key in status or status[key]:
                print('received empty response from ' + key + '')
                log.error('dashboardd', 'Lost contact with ' + key + ' (empty response)')
            status[key] = False
        else:
            if key in status and not status[key]:
                log.info('dashboardd', 'Restored contact with ' + key)
            status[key] = True
            return response
    except Exception as e:
        print('failed to query ' + key + ' with error: ' + str(e))
        if not key in status or status[key]:
            log.error('dashboardd', 'Lost contact with ' + key + ' (' + str(e) + ')')
        status[key] = False

    return None


def extract_environment_data(data, data_map):
    """Extract weather data from the observatory_environment response
       data_map defines a dictionary of daemons and sensors that are requested
    """
    try:
        ret = {}
        for daemon, sensors in data_map.items():
            ret[daemon] = {}
            if daemon not in data or 'parameters' not in data[daemon]:
                continue

            daemon_data = data[daemon]['parameters']
            for sensor in sensors:
                ret[daemon][sensor] = {}
                if daemon_data[sensor]['current']:
                    for s in ['latest', 'min', 'max', 'limits', 'warn_limits']:
                        if s in daemon_data[sensor]:
                            ret[daemon][sensor][s] = daemon_data[sensor][s]
        return ret
    except:
        return {}


def extract_daemon_data(daemon_map, status):
    output = {}
    for daemon, key, query in daemon_map:
        try:
            response = query_daemon(daemon, key, query, status)
            if response:
                if len(daemon_map) == 1:
                    output = response
                else:
                    output[key] = response
        except:
            continue
    return output


def extract_preview_data(preview_map):
    output = {}
    for camera_id, filename in preview_map.items():
        with open(os.path.join(GENERATED_DATA_DIR, filename), encoding='utf-8') as f:
            output[camera_id] = json.load(f)

    return {'previews': output}


def write_output(output, output_filename):
    try:
        output_path = os.path.join(GENERATED_DATA_DIR, output_filename)
        with gzip.open(output_path + '.tmp', 'w') as f:
            f.write(json.dumps(output or {}).encode('utf-8'))

        shutil.move(output_path + '.tmp', output_path)
    except Exception as e:
        print('failed to write json with error: ' + str(e))
        log.error('dashboardd', 'Failed to write json (' + str(e) + ')')


def generate_goto_json(output_path, date, environment, status):
    """Queries the observatory environment daemon and saves as json
       the data useful for the GOTO dashboard page
    """
    output = {'date': date}
    if environment:
        output.update(extract_environment_data(environment, {
            'goto_vaisala': [
                'wind_speed', 'temperature', 'relative_humidity', 'dew_point_delta',
                'pressure'
            ],
            'rain': ['unsafe_boards'],
            'goto_dome1_domealert': ['internal_temp', 'internal_humidity'],
            'goto_dome2_domealert': ['internal_temp', 'internal_humidity', 'hatch_closed'],
            'goto_ups': [
                'dome1_upper_ups_status', 'dome1_upper_ups_battery_remaining', 'dome1_upper_ups_battery_healthy',
                'dome1_lower_ups_status', 'dome1_lower_ups_battery_remaining', 'dome1_lower_ups_battery_healthy',
                'dome2_upper_ups_status', 'dome2_upper_ups_battery_remaining', 'dome2_upper_ups_battery_healthy',
                'dome2_lower_ups_status', 'dome2_lower_ups_battery_remaining', 'dome2_lower_ups_battery_healthy',
            ],
            'tng': ['dust', 'seeing', 'solarimeter'],
            'ephem': ['sun_alt', 'moon_alt', 'moon_percent_illumination']
        }))

    output.update(extract_daemon_data([
        (daemons.goto_dome1_gtecs_power, 'goto_dome1_power', lambda d: d.get_info(force_update=False)),
        (daemons.goto_dome1_gtecs_mnt, 'goto_dome1_mnt', lambda d: d.get_info(force_update=False)),
        (daemons.goto_dome1_gtecs_dome, 'goto_dome1_dome', lambda d: d.get_info(force_update=False)),
        (daemons.goto_dome1_gtecs_filt, 'goto_dome1_filt', lambda d: d.get_info(force_update=False)),
        (daemons.goto_dome1_gtecs_foc, 'goto_dome1_foc', lambda d: d.get_info(force_update=False)),
        (daemons.goto_dome1_gtecs_cam, 'goto_dome1_cam', lambda d: d.get_info(force_update=False)),
        (daemons.goto_dome1_gtecs_exq, 'goto_dome1_exq', lambda d: d.get_info(force_update=False)),
        (daemons.goto_dome1_gtecs_ota, 'goto_dome1_ota', lambda d: d.get_info(force_update=False)),
        (daemons.goto_dome1_gtecs_conditions, 'goto_dome1_conditions', lambda d: d.get_info(force_update=False))
    ], status))

    output.update(extract_daemon_data([
        (daemons.goto_dome2_gtecs_power, 'goto_dome2_power', lambda d: d.get_info(force_update=False)),
        (daemons.goto_dome2_gtecs_mnt, 'goto_dome2_mnt', lambda d: d.get_info(force_update=False)),
        (daemons.goto_dome2_gtecs_dome, 'goto_dome2_dome', lambda d: d.get_info(force_update=False)),
        (daemons.goto_dome2_gtecs_filt, 'goto_dome2_filt', lambda d: d.get_info(force_update=False)),
        (daemons.goto_dome2_gtecs_foc, 'goto_dome2_foc', lambda d: d.get_info(force_update=False)),
        (daemons.goto_dome2_gtecs_cam, 'goto_dome2_cam', lambda d: d.get_info(force_update=False)),
        (daemons.goto_dome2_gtecs_exq, 'goto_dome2_exq', lambda d: d.get_info(force_update=False)),
        (daemons.goto_dome2_gtecs_ota, 'goto_dome2_ota', lambda d: d.get_info(force_update=False)),
        (daemons.goto_dome2_gtecs_conditions, 'goto_dome2_conditions', lambda d: d.get_info(force_update=False))
    ], status))

    for key in ['acceleration_history', 'encoder_position_history', 'motor_current_history', 'position_error_history', 'tracking_error_history', 'velocity_history']:
        del output['goto_dome1_mnt'][key]
        del output['goto_dome2_mnt'][key]

    write_output(output, output_path)


def generate_onemetre_json(output_path, date, environment, status):
    """Queries daemons to generate the public data for the W1m dashboard page"""
    output = {'date': date}
    if environment:
        output.update(extract_environment_data(environment, {
            'w1m_vaisala': [
                'wind_speed', 'temperature', 'relative_humidity', 'dew_point_delta',
                'pressure', 'median_wind_speed'
            ],
            'rain': ['unsafe_boards'],
            'w1m_domealert': [
                'internal_humidity', 'internal_temp', 'truss_temp',
                'security_system_safe', 'trap_closed', 'hatch_closed'
            ],
            'w1m_diskspace': ['data_fs_available_bytes'],
            'tng': ['dust', 'seeing', 'solarimeter'],
            'ephem': ['sun_alt', 'moon_alt', 'moon_percent_illumination']
        }))

    output.update(extract_daemon_data([
        (daemons.onemetre_operations, 'w1m_ops', lambda d: d.status()),
        (daemons.onemetre_telescope, 'w1m_telescope', lambda d: d.report_status()),
        (daemons.onemetre_dome, 'w1m_dome', lambda d: d.status()),
        (daemons.onemetre_pipeline, 'w1m_pipeline', lambda d: d.report_status()),
        (daemons.onemetre_blue_camera, 'w1m_blue', lambda d: d.report_status()),
        (daemons.onemetre_red_camera, 'w1m_red', lambda d: d.report_status()),
        (daemons.onemetre_power, 'w1m_power', lambda d: d.last_measurement()),
        (daemons.onemetre_dehumidifier, 'w1m_dehumidifier', lambda d: d.status())
    ], status))

    output.update(extract_preview_data({
        'blue': 'dashboard-BLUE.json',
        'red': 'dashboard-RED.json'
    }))

    write_output(output, output_path)


def generate_superwasp_json(output_path, date, environment, status):
    """Queries daemons to generate the public data for the SuperWASP dashboard page"""
    output = {'date': date}
    if environment:
        output.update(extract_environment_data(environment, {
            'w1m_vaisala': [
                'wind_speed', 'temperature', 'relative_humidity', 'dew_point_delta',
                'pressure', 'median_wind_speed'
            ],
            'rain': ['unsafe_boards'],
            'clasp_domealert': ['superwasp_temperature', 'superwasp_humidity'],
            'superwasp_diskspace_das1': ['data_fs_available_bytes'],
            'superwasp_diskspace_das2': ['data_fs_available_bytes'],
            'tng': ['dust', 'seeing', 'solarimeter'],
            'ephem': ['sun_alt', 'moon_alt', 'moon_percent_illumination']
        }))

    output.update(extract_daemon_data([
        (daemons.superwasp_operations, 'superwasp_ops', lambda d: d.status()),
        (daemons.superwasp_telescope, 'superwasp_telescope', lambda d: d.report_status()),
        (daemons.superwasp_dome, 'superwasp_dome', lambda d: d.status()),
        (daemons.superwasp_pipeline, 'superwasp_pipeline', lambda d: d.report_status()),
        (daemons.superwasp_camvirt_das1, 'superwasp_cam_1', lambda d: d.report_camera_status('cam1')),
        (daemons.superwasp_camvirt_das1, 'superwasp_cam_2', lambda d: d.report_camera_status('cam2')),
        (daemons.superwasp_camvirt_das2, 'superwasp_cam_3', lambda d: d.report_camera_status('cam3')),
        (daemons.superwasp_camvirt_das2, 'superwasp_cam_4', lambda d: d.report_camera_status('cam4')),
        (daemons.superwasp_lensheater, 'superwasp_lensheater', lambda d: d.report_status()),
        (daemons.superwasp_power, 'superwasp_power', lambda d: d.last_measurement()),
        (daemons.superwasp_dehumidifier, 'superwasp_dehumidifier', lambda d: d.status())
    ], status))

    output.update(extract_preview_data({
        'cam1': 'dashboard-1.json',
        'cam2': 'dashboard-2.json',
        'cam3': 'dashboard-3.json',
        'cam4': 'dashboard-4.json',
    }))

    write_output(output, output_path)


def generate_halfmetre_json(output_path, date, environment, status):
    """Queries daemons to generate the public data for the half metre dashboard page"""
    output = {'date': date}
    if environment:
        output.update(extract_environment_data(environment, {
            'goto_vaisala': [
                'wind_speed', 'temperature', 'relative_humidity', 'dew_point_delta',
                'pressure', 'median_wind_speed'
            ],
            'rain': ['unsafe_boards'],
            'halfmetre_domealert': [
                'comp_room_temp', 'comp_room_humidity',
                'tel_room_temp', 'tel_room_humidity'],
            'halfmetre_diskspace': ['data_fs_available_bytes'],
            'tng': ['dust', 'seeing', 'solarimeter'],
            'ephem': ['sun_alt', 'moon_alt', 'moon_percent_illumination']
        }))

    output.update(extract_daemon_data([
        (daemons.halfmetre_operations, 'halfmetre_ops', lambda d: d.status()),
        (daemons.halfmetre_telescope, 'halfmetre_telescope', lambda d: d.report_status()),
        (daemons.halfmetre_roof, 'halfmetre_roof', lambda d: d.status()),
        (daemons.halfmetre_pipeline, 'halfmetre_pipeline', lambda d: d.report_status()),
        (daemons.halfmetre_cam, 'halfmetre_cam', lambda d: d.report_status()),
        (daemons.halfmetre_focuser, 'halfmetre_focus', lambda d: d.report_status()),
        (daemons.halfmetre_power, 'halfmetre_power', lambda d: d.last_measurement()),
        (daemons.halfmetre_aircon, 'halfmetre_aircon', lambda d: d.last_measurement())
    ], status))

    output.update(extract_preview_data({
        'halfmetre': 'dashboard-HALFMETRE.json'
    }))

    write_output(output, output_path)


def generate_clasp_json(output_path, date, environment, status):
    """Queries daemons to generate the public data for the CLASP dashboard page"""
    output = {'date': date}
    if environment:
        output.update(extract_environment_data(environment, {
            'w1m_vaisala': [
                'wind_speed', 'temperature', 'relative_humidity', 'dew_point_delta',
                'pressure', 'median_wind_speed'
            ],
            'rain': ['unsafe_boards'],
            'clasp_domealert': [
                'internal_humidity', 'internal_temperature'
            ],
            'clasp_diskspace_cam1': ['data_fs_available_bytes'],
            'clasp_diskspace_cam2': ['data_fs_available_bytes'],
            'tng': ['dust', 'seeing', 'solarimeter'],
            'ephem': ['sun_alt', 'moon_alt', 'moon_percent_illumination']
        }))

    output.update(extract_daemon_data([
        (daemons.clasp_operations, 'clasp_ops', lambda d: d.status()),
        (daemons.clasp_telescope, 'clasp_mount', lambda d: d.report_status()),
        (daemons.clasp_focus, 'clasp_focus', lambda d: d.report_status()),
        (daemons.clasp_dome, 'clasp_dome', lambda d: d.status()),
        (daemons.clasp_pipeline, 'clasp_pipeline', lambda d: d.report_status()),
        (daemons.clasp_camvirt_1, 'clasp_cam1', lambda d: d.report_camera_status('cam1')),
        (daemons.clasp_camera_2, 'clasp_cam2', lambda d: d.report_status()),
        (daemons.clasp_power, 'clasp_power', lambda d: d.last_measurement()),
        (daemons.clasp_dehumidifier, 'clasp_dehumidifier', lambda d: d.status()),
        (daemons.clasp_chiller, 'clasp_chiller', lambda d: d.report_status())
    ], status))

    output.update(extract_preview_data({
        'cam1': 'dashboard-CAM1.json',
        'cam2': 'dashboard-CAM2.json'
    }))

    write_output(output, output_path)


def generate_data():
    status_file_path = os.path.join(GENERATED_DATA_DIR, 'update-dashboard-data.json')
    try:
        with open(status_file_path, 'r', encoding='utf-8') as f:
            status = json.load(f)
    except Exception:
        status = {}

    date = datetime.datetime.utcnow().strftime('%Y-%m-%dT%H:%M:%S.%f')
    environment = query_daemon(daemons.observatory_environment, 'observatory_environment', lambda d: d.status(), status)

    generate_onemetre_json('onemetre.json.gz', date, environment, status)
    generate_goto_json('goto.json.gz', date, environment, status)
    generate_superwasp_json('superwasp.json.gz', date, environment, status)
    generate_clasp_json('clasp.json.gz', date, environment, status)
    generate_halfmetre_json('halfmetre.json.gz', date, environment, status)

    with open(status_file_path, 'w', encoding='utf-8') as f:
        json.dump(status, f)


if __name__ == '__main__':
    generate_data()
